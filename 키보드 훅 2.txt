using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SpecialCampaignSkillCoolDown
{
	public partial class Form1 : Form
	{
		//윈도우 후킹
		const int WH_KEYBOARD_LL = 13;
		//이벤트용 메세지 Key Down
		const int WM_KEYDOWN = 0x100;
		//이벤트용 메세지 Key Up
		const int WM_KEYUP = 0x101;

		private static int inputKey = 0;


		[DllImport("user32.dll")]
		static extern bool keybd_event(uint bVk, uint bScan, uint dwFlags, int dwExtraInfo);


		[DllImport("user32.dll")]
		static extern IntPtr SetWindowsHookEx(int idHook, LowLevelKeyboardProc callback, IntPtr hInstance, uint threadId);


		[DllImport("user32.dll")]
		static extern bool UnhookWindowsHookEx(IntPtr hInstance);


		[DllImport("user32.dll")]
		static extern IntPtr CallNextHookEx(IntPtr idHook, int nCode, int wParam, IntPtr lParam);


		[DllImport("kernel32.dll")]
		static extern IntPtr LoadLibrary(string lpFileName);


		private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);

		private LowLevelKeyboardProc _proc = hookProc;


		private static IntPtr hhook = IntPtr.Zero;


		public void SetHook()
		{
			IntPtr hInstance = LoadLibrary("User32");
			hhook = SetWindowsHookEx(WH_KEYBOARD_LL, _proc, hInstance, 0);
		}


		public static void UnHook()
		{
			UnhookWindowsHookEx(hhook);
		}

		public static IntPtr hookProc(int code, IntPtr wParam, IntPtr lParam)
		{


			if (code >= 0 && wParam == (IntPtr)WM_KEYDOWN)
			{
				//방향키만 후킹하지 않음.
				int key = Marshal.ReadInt32(lParam);

				inputKey = key;

				return CallNextHookEx(hhook, code, (int)wParam, lParam);
			}
			else
				return CallNextHookEx(hhook, code, (int)wParam, lParam);
		}

		public Form1()
		{
			InitializeComponent();
		}

		private void Form1_Load(object sender, EventArgs e)
		{
			SetHook();
		}

		private void Form1_FormClosing(object sender, FormClosingEventArgs e)
		{
			UnHook();
		}

		private void BTGameMode_Click(object sender, EventArgs e)
		{
			this.FormBorderStyle = FormBorderStyle.None;
			BTGameMode.Visible = false;
			BTSetting.Visible = false;
		}

		private void BTSetting_Click(object sender, EventArgs e)
		{
			GC.Collect();
		}

		private void ShowControll_Tick(object sender, EventArgs e)
		{
			CoolDown0.Invoke((MethodInvoker)delegate { CoolDown0.Text = inputKey.ToString(); });
		}
	}
}